<UserControl x:Class="br.com.Bonus630DevToolsBar.RecentFiles.RecentFilesView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:br.com.Bonus630DevToolsBar.RecentFiles" 
             xmlns:converters="clr-namespace:br.com.Bonus630DevToolsBar.Converters"
             xmlns:custom="clr-namespace:br.com.Bonus630DevToolsBar.CustomControls"
             d:DataContext="{d:DesignInstance Type=local:RecentFilesViewModel}"
             mc:Ignorable="d" 
             d:Background="White" VerticalAlignment="Stretch" Background="Transparent" >
    <UserControl.Resources>

        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Bonus630DevToolsBar;component/Images/Images.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Bonus630DevToolsBar;component/RunCommandDocker/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Bonus630DevToolsBar;component/RunCommandDocker/Styles/Styles.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <converters:InvertBoolVisibilityConverter x:Key="InvertBoolVisibilityConverter" />
            <converters:EmptyStringToVisibilityConverter x:Key="EmptyStringToVisibilityConverter" />
            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{DynamicResource Default.Static.Background}"/>
                <!--<Setter Property="Background" Value="{DynamicResource Container.Text.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}"/>-->
                <Setter Property="Foreground" Value="{DynamicResource Default.Static.Foreground}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Grid x:Name="templateRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="markGrid">
                                    <Border x:Name="border"  Background="{DynamicResource Button.Static.Border}" SnapsToDevicePixels="true" HorizontalAlignment="Left" VerticalAlignment="Center" Width="24" Height="8" CornerRadius="4"/>
                                    <Ellipse x:Name="optionMark" Width="12" Height="12"  Fill="{DynamicResource Default.Static.Foreground}" HorizontalAlignment="Left" VerticalAlignment="Center">
                                        <Ellipse.Effect>
                                            <DropShadowEffect ShadowDepth="1" Opacity="0.6" Direction="315" BlurRadius="2"/>
                                        </Ellipse.Effect>

                                    </Ellipse>

                                </Grid>
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="HasContent" Value="true">
                                    <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                    <Setter Property="Padding" Value="5,-1,0,0"/>
                                </Trigger>
                                <!--<Trigger Property="IsMouseOver" Value="true">
                                    <Setter TargetName="optionMark" Property="StrokeThickness" Value="1" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="false">
                                    <Setter TargetName="optionMark" Property="StrokeThickness" Value="0" />
                                </Trigger>-->

                                <Trigger Property="IsChecked" Value="true">
                                    <!--<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource Button.MouseOver.Border}"/>-->
                                    <Setter Property="HorizontalAlignment" TargetName="optionMark" Value="Right"/>
                                    <Setter Property="Fill" TargetName="optionMark" Value="#ff0a9587" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <!--<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource Button.Static.Border}"/>-->
                                    <Setter Property="HorizontalAlignment" TargetName="optionMark" Value="Left"/>

                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

            </Style>
            <!--ComboBox Start -->
            <Style  TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource Default.Static.Foreground}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Static.Background}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Disabled.Foreground}"/>
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Disabled.Background}"/>
                                    <Setter Property="Foreground"  Value="{DynamicResource Button.Disabled.Foreground}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource TabItem.Selected.MouseOver.Background}"/>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="MenuItem" x:Key="CheckableMenuItemStyle"  BasedOn="{StaticResource {x:Type MenuItem}}">
                <Setter Property="IsCheckable" Value="True"/>
                <Setter Property="Background" Value="{DynamicResource Button.Static.Background}" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="MenuItem">
                            <Grid  Background="{DynamicResource Button.Static.Background}">
                                <Border x:Name="Part" Padding="0" BorderThickness="1" BorderBrush="{x:Null}" Background="{DynamicResource Button.Static.Background}">
                                    <Grid Margin="2">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="20" />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <Path x:Name="Part_Check" Grid.Column="0" Data="M1,5 L5,9 L10,1 L11,1 L5,10 L1,5" Stroke="Green" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                        <ContentPresenter Grid.Column="1" ContentSource="Header" Margin="0" SnapsToDevicePixels="True"/>
                                    </Grid>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="Part_Check" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter TargetName="Part_Check" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="Part" Property="BorderBrush" Value="{DynamicResource Button.MouseOver.Border}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="Popup" x:Key="PreviewPopupStyle">
                <Setter Property="AllowsTransparency" Value="True" />


            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <DockPanel x:Name="dockPanel_content" LastChildFill="True" SizeChanged="DockPanel_SizeChanged">

        <CheckBox x:Name="ck_autoLoad"  ToolTip="Auto Open Files" 
                  Click="CheckBox_Click" DockPanel.Dock="Left">
            <CheckBox.ContextMenu>
                <ContextMenu Background="{DynamicResource Button.Static.Background}">
                    <MenuItem Style="{StaticResource CheckableMenuItemStyle}" Header="Use Index" Name="menu_index" Click="menu_index_Click" IsChecked="True"/>
                    <MenuItem Style="{StaticResource CheckableMenuItemStyle}" Header="Use initials of the file name"  Name="menu_name"  Click="menu_name_Click" IsChecked="False"/>
                    <MenuItem Style="{StaticResource CheckableMenuItemStyle}" Header="Use Micro Thumb"  Name="menu_thumb"  Click="menu_thumb_Click" IsChecked="False"/>

                </ContextMenu>
            </CheckBox.ContextMenu>
        </CheckBox>
        <custom:SVGButton Margin="4,0,0,0" Visibility="{Binding CanDecrease,Converter={StaticResource BooleanToVisibilityConverter}}" 
                          x:Name="back" Width="20" Height="20" Click="back_Click" DockPanel.Dock="Left" ToolTip="Preview" Padding="2">
            <custom:SVGButton.Paths>
                <custom:path d="M16,2 16,5 9,10 16,15 16,18 4,10z"  />

            </custom:SVGButton.Paths>
        </custom:SVGButton>
        <custom:SVGButton Margin="0,0,4,0" Visibility="{Binding CanIncrease,Converter={StaticResource BooleanToVisibilityConverter}}"  
                x:Name="forward" Width="20" Height="20" Click="forward_Click"  DockPanel.Dock="Right" ToolTip="Next" Padding="2">
            <custom:SVGButton.Paths>
                <custom:path d="M4 2 4 5 11 10 4 15 4 18 16 10z"  />
            </custom:SVGButton.Paths>
        </custom:SVGButton>
        <Popup x:Name="InfoPopup" Placement="Mouse" StaysOpen="True" AllowsTransparency="True" Width="256" >
            <Border BorderThickness="1" CornerRadius="8" Padding="0" Background="{DynamicResource Container.Static.Background}" 
                    BorderBrush="{DynamicResource Button.Static.Border}" SnapsToDevicePixels="true">
                <Grid Background="Transparent">
                    <Grid.RowDefinitions>
                        <RowDefinition  />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Image Grid.Row="0"  Width="256" Height="256" Source="{Binding Thumb}" Visibility="{Binding IsOpened,Converter={StaticResource InvertBoolVisibilityConverter}}">
                        <Image.Clip>
                            <CombinedGeometry>
                                <CombinedGeometry.Geometry1>
                                    <RectangleGeometry RadiusX="8" RadiusY="8" Rect="0,0,256,240" />
                                </CombinedGeometry.Geometry1>
                                <CombinedGeometry.Geometry2>
                                    <RectangleGeometry Rect="0,230,256,16" />
                                </CombinedGeometry.Geometry2>
                            </CombinedGeometry>
                        </Image.Clip>
                    </Image>
                    <StackPanel Grid.Row="1" Margin="2,4,2,4" Background="Transparent">
                            <Label Grid.Column="0" Content="{Binding FullName}" ToolTip="{Binding FullName}" FontSize="9"/>
                            <Label Content="File is Opened!" Visibility="{Binding IsOpened,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                            <StackPanel Orientation="Horizontal">
                                <Ellipse Fill="Green" Width="6" Height="6" VerticalAlignment="Center" Visibility="{Binding AutoLoad,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                <Label Content="{Binding Name,FallbackValue=Nome do arquivo.cdr}" ToolTip="{Binding FullName}" FontWeight="Bold" />
                                <Label Content="{Binding Version,FallbackValue=0}" FontWeight="Bold" />
                            </StackPanel>
                        </StackPanel>
                    </Grid>
            </Border>
        </Popup>
        <ItemsControl x:Name="Items"  VerticalAlignment="Stretch" Margin="6,0,0,0"  ItemsSource="{Binding Files}" Height="20" Width="960">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Button  Tag="{Binding FullName}" VerticalAlignment="Stretch" ToolTip="{Binding FullName}"
                             Width="{Binding ElementName=PART_content,Path=Width}" Height="20" MaxHeight="48" MaxWidth="48" 
                             Click="Button_Click" MouseEnter="Button_MouseEnter" MouseLeave="Button_MouseLeave" Margin="0,0,4,0" Padding="0">
                        <Grid Name="PART_content" Width="Auto">
                            <Grid Margin="1">
                                <!--Width="24" Height="18">-->
                                <Polyline Points="0,0 6,0 0,6" Fill="Green" Panel.ZIndex="1" Visibility="{Binding AutoLoad,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                <Polyline Points="24,18 18,18 24,12" Fill="Red"  Visibility="{Binding IsOpened,Converter={StaticResource BooleanToVisibilityConverter},UpdateSourceTrigger=PropertyChanged}" Panel.ZIndex="2"/>
                                <Label Content="{Binding AbsName,FallbackValue=0}"  Padding="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="24"
                   HorizontalContentAlignment="Center" Background="{DynamicResource Button.Static.Background}" Panel.ZIndex="-1"
                   Visibility="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Content,Converter={StaticResource EmptyStringToVisibilityConverter}}"/>
                                <Image Width="20" Height="20"  Panel.ZIndex="-2" Source="{Binding Thumb}"/>
                                <Label Content="{Binding AbsName,FallbackValue=0}"  Padding="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="18"
                   HorizontalContentAlignment="Center" Background="{DynamicResource Button.Static.Background}" Panel.ZIndex="-3" />
                            </Grid>
                        </Grid>
                        <!--<Button.ToolTip>
                                <ToolTip Style="{StaticResource PreviewToolTipStyle}">
                                    -->
                        <!--<Border BorderThickness="1" BorderBrush="Red" CornerRadius="6">-->
                        <!--
                                    <StackPanel>
                                        <Image  Width="256" Height="256" Source="{Binding Thumb}" Visibility="{Binding IsOpened,Converter={StaticResource InvertBoolVisibilityConverter}}"/>
                                        <Label Content="File is Opened!" Visibility="{Binding IsOpened,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                        <StackPanel Orientation="Horizontal">
                                            <Ellipse Fill="Green" Width="6" Height="6" VerticalAlignment="Center" Visibility="{Binding AutoLoad,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                            <Label Content="{Binding Name,FallbackValue=Nome do arquivo.cdr}" ToolTip="{Binding FullName}" />
                                            <Label Content="{Binding Version,FallbackValue=0}" FontWeight="Bold" />
                                        </StackPanel>
                                    </StackPanel>

                                    -->
                        <!--</Border>-->
                        <!--
                                </ToolTip>
                            </Button.ToolTip>-->
                        <Button.ContextMenu>
                            <ContextMenu >
                                <MenuItem Header="Pin" Click="MenuItem_Click_Pin" Tag="{Binding ID}" ToolTip="Pin here!" Visibility="{Binding IsPinned,Converter={StaticResource InvertBoolVisibilityConverter}}">
                                    <MenuItem.Icon>
                                        <Image Style="{StaticResource PinImage}"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Unpin"  Click="MenuItem_Click_UnPin" Tag="{Binding ID}" ToolTip="UnPin!" Visibility="{Binding IsPinned,Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <MenuItem.Icon>
                                        <Image Style="{DynamicResource PinImage}"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Remove" Click="MenuItem_Click_RemoveFileData" Tag="{Binding ID}" ToolTip="Remove from list, file is not deleted">
                                    <MenuItem.Icon>
                                        <Image Style="{DynamicResource ClearConsoleButtonImg}" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Add to Auto Open" Click="MenuItem_Click_AddToAutoLoad" Tag="{Binding ID}"  Visibility="{Binding AutoLoad,Converter={StaticResource InvertBoolVisibilityConverter}}" >
                                    <MenuItem.Icon>
                                        <Image Style="{DynamicResource AddShapeRangeImage}" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Remove from Auto Open" Click="MenuItem_Click_RemoveFromAutoLoad" Tag="{Binding ID}" Visibility="{Binding AutoLoad,Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <MenuItem.Icon>
                                        <Image Style="{DynamicResource RemoveShapeRangeImage}" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Copy Path" Click="MenuItem_Click_CopyPath" Tag="{Binding ID}">
                                    <MenuItem.Icon>
                                        <Image Style="{DynamicResource CopyBigImg}" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Open Directory" Click="MenuItem_Click_OpenDirectory" Tag="{Binding ID}" >
                                    <MenuItem.Icon>
                                        <Image Style="{DynamicResource OpenFolderImg}" />
                                    </MenuItem.Icon>
                                </MenuItem>
                            </ContextMenu>
                        </Button.ContextMenu>
                    </Button>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </DockPanel>
</UserControl>
