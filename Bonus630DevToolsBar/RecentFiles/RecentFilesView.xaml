<UserControl x:Class="br.com.Bonus630DevToolsBar.RecentFiles.RecentFilesView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:br.com.Bonus630DevToolsBar.RecentFiles" 
             xmlns:converters="clr-namespace:br.com.Bonus630DevToolsBar.Converters"
             d:DataContext="{d:DesignInstance Type=local:RecentFilesViewModel}"
             mc:Ignorable="d" 
             d:Background="White" >
    <UserControl.Resources>
        
        <ResourceDictionary>
            
            <ResourceDictionary.MergedDictionaries>
                
                <ResourceDictionary Source="pack://application:,,,/Bonus630DevToolsBar;component/RunCommandDocker/Styles/Colors.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/Bonus630DevToolsBar;component/RunCommandDocker/Styles/Styles.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <converters:InvertBoolVisibilityConverter x:Key="InvertBoolVisibilityConverter" />
            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{DynamicResource Default.Static.Background}"/>
                <!--<Setter Property="Background" Value="{DynamicResource Container.Text.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}"/>-->
                <Setter Property="Foreground" Value="{DynamicResource Default.Static.Foreground}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Grid x:Name="templateRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="markGrid">
                                    <Border x:Name="border"  Background="{DynamicResource Button.Static.Border}" SnapsToDevicePixels="true" HorizontalAlignment="Left" VerticalAlignment="Center" Width="24" Height="8" CornerRadius="4"/>
                                    <Ellipse x:Name="optionMark" Width="12" Height="12"  Fill="{DynamicResource Default.Static.Foreground}" HorizontalAlignment="Left" VerticalAlignment="Center">
                                        <Ellipse.Effect>
                                            <DropShadowEffect ShadowDepth="1" Opacity="0.6" Direction="315" BlurRadius="2"/>
                                        </Ellipse.Effect>

                                    </Ellipse>

                                </Grid>
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="HasContent" Value="true">
                                    <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                    <Setter Property="Padding" Value="5,-1,0,0"/>
                                </Trigger>
                                <!--<Trigger Property="IsMouseOver" Value="true">
                                    <Setter TargetName="optionMark" Property="StrokeThickness" Value="1" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="false">
                                    <Setter TargetName="optionMark" Property="StrokeThickness" Value="0" />
                                </Trigger>-->

                                <Trigger Property="IsChecked" Value="true">
                                    <!--<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource Button.MouseOver.Border}"/>-->
                                    <Setter Property="HorizontalAlignment" TargetName="optionMark" Value="Right"/>
                                    <Setter Property="Fill" TargetName="optionMark" Value="#ff0a9587" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <!--<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource Button.Static.Border}"/>-->
                                    <Setter Property="HorizontalAlignment" TargetName="optionMark" Value="Left"/>

                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

            </Style>
            <!--ComboBox Start -->
            <Style  TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource Default.Static.Foreground}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Static.Background}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Disabled.Foreground}"/>
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Disabled.Background}"/>
                                    <Setter Property="Foreground"  Value="{DynamicResource Button.Disabled.Foreground}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource TabItem.Selected.MouseOver.Background}"/>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <DockPanel LastChildFill="True">
        <CheckBox x:Name="ck_autoLoad" DockPanel.Dock="Left" ToolTip="Auto Load Files" VerticalAlignment="Center" Click="CheckBox_Click"/>
      
        <ItemsControl x:Name="Items" DockPanel.Dock="Right" Margin="10,0,0,0" ItemsSource="{Binding Files}" Height="20" Width="400">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Button Content="{Binding Index,FallbackValue=0}" Tag="{Binding FullName}" Width="20" Height="20" Click="Button_Click" MouseEnter="Button_MouseEnter">
                        <Button.ToolTip>

                            <Border BorderThickness="1">
                                <StackPanel>
                                    <Image  Width="256" Height="256" Source="{Binding Thumb}" Visibility="{Binding IsOpened,Converter={StaticResource InvertBoolVisibilityConverter}}"/>
                                    <Label Content="File is Opened!" Visibility="{Binding IsOpened,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    <Label Content="{Binding Name,FallbackValue=Nome do arquivo.cdr}" />
                                </StackPanel>
                            </Border>
                        </Button.ToolTip>
                        <Button.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Remove" Click="MenuItem_Click" Tag="{Binding ID}" />
                                <MenuItem Header="Add to Auto Load" Click="MenuItem_Click_1" Tag="{Binding ID}" />
                                <MenuItem Header="Remove Auto Load" Click="MenuItem_Click_2" Tag="{Binding ID}" Visibility="{Binding AutoLoad,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                            </ContextMenu>
                        </Button.ContextMenu>
                    </Button>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
      
    </DockPanel>
</UserControl>
